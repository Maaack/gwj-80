[gd_scene load_steps=15 format=3 uid="uid://b5iybcpovkwdx"]

[ext_resource type="Script" uid="uid://3uu1o1e5j8b2" path="res://scripts/slimes/slime_metal.gd" id="1_31s8q"]
[ext_resource type="PackedScene" uid="uid://chx4skxp7tgbu" path="res://assets/Art/3d/Slime/Slime.tscn" id="1_gwy1k"]
[ext_resource type="Texture2D" uid="uid://c4pifxb02vxkv" path="res://assets/Art/3d/Slime/SLime_Eyes_==.png" id="3_rsrpr"]
[ext_resource type="Texture2D" uid="uid://bhxk5kmc8mpcd" path="res://assets/Art/3d/Slime/Metal.png" id="4_8bit7"]
[ext_resource type="Texture2D" uid="uid://c8imleptqp8rl" path="res://assets/Art/3d/Slime/SLime_Mouth_ Happy D.png" id="5_l0npq"]
[ext_resource type="PackedScene" uid="uid://dctf57s33kdcy" path="res://scenes/slimes/alerted_indicator.tscn" id="6_8bit7"]
[ext_resource type="PackedScene" uid="uid://dk3mqxfsapt2s" path="res://scenes/slimes/nudgeable_indicator.tscn" id="7_rsrpr"]

[sub_resource type="SphereShape3D" id="SphereShape3D_6nu0y"]
resource_local_to_scene = true
radius = 0.63

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_b2s7r"]
transparency = 2
alpha_scissor_threshold = 0.5
alpha_antialiasing_mode = 0
albedo_texture = ExtResource("3_rsrpr")

[sub_resource type="Shader" id="Shader_indmr"]
code = "shader_type spatial;

#define USE_RIM 1

#define USE_PIXELART 1
#define USE_SMOOTH_PIXELART 1

#define USE_ALPHA 1
#define USE_DISABLE_CULL 1

#define USE_SUBSURFACESCATTERING 1

render_mode 
	#if USE_DISABLE_CULL
		cull_disabled;
	#else
		cull_back;
	#endif

group_uniforms Toon;
uniform float     ToonRampOffset:     hint_range(0.0, 1.0) = 0.5;
uniform float     ToonRampSmoothness: hint_range(0.0, 1.0) = 0.05;
uniform vec3      ToonRampTinting:    source_color;

#if USE_RIM
	group_uniforms Rim;
	uniform float     RimPower:           hint_range(0.0, 10.0) = 1.0;
	uniform float     RimCutOff:          hint_range(0.0, 1.0) = 0.5;
	uniform float     RimSmoothness:      hint_range(0.0, 1.0) = 0.05;
	uniform float     RimLightBrightness: hint_range(0.0, 50.0) = 20.0;
#endif

#if USE_SUBSURFACESCATTERING
	group_uniforms SubsurfaceScattering;
	uniform float     SubSurfDistortion:  hint_range(0.0, 5.0) = 1.0;
	uniform vec3      SubSurfTint:        source_color;
	uniform float     SubSurfBrightness:  hint_range(0.0, 10.0) = 3.0;
	uniform float     SubSurfCutoff:      hint_range(0.0, 1.0) = 0.5;
	uniform float     SubSurfSmoothness:  hint_range(0.0, 1.0) = 0.05;
	uniform sampler2D SubSurfTexture:  source_color, hint_default_white;
	
#endif

group_uniforms Texture;
#if (USE_SMOOTH_PIXELART || !USE_PIXELART)
	uniform sampler2D Texture:            source_color, filter_linear_mipmap_anisotropic;
#else 
	uniform sampler2D Texture:            source_color, filter_nearest_mipmap_anisotropic;
#endif

#if USE_RIM
	float fresnel(float amount, vec3 normal, vec3 view) {
		return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
	}
#endif

#if USE_SMOOTH_PIXELART
	vec4 texture_point_smooth(sampler2D smp, vec2 uv, vec2 pixel_size) {
		vec2 ddx = dFdx(uv);
		vec2 ddy = dFdy(uv);
		vec2 lxy = sqrt(ddx * ddx + ddy * ddy);
		
		vec2 uv_pixels = uv / pixel_size;
		
		vec2 uv_pixels_floor = round(uv_pixels) - vec2(0.5f);
		vec2 uv_dxy_pixels = uv_pixels - uv_pixels_floor;
		
		uv_dxy_pixels = clamp((uv_dxy_pixels - vec2(0.5f)) * pixel_size / lxy + vec2(0.5f), 0.0f, 1.0f);
		
		uv = uv_pixels_floor * pixel_size;
		
		return textureGrad(smp, uv + uv_dxy_pixels * pixel_size, ddx, ddy);
	}
#endif

void fragment() {
	vec4 textureColor;
	
	#if USE_SMOOTH_PIXELART
		vec2 tex_size = 1.0f / vec2(textureSize(Texture, 0));
		textureColor = texture_point_smooth(Texture, UV, tex_size);
	#else
		textureColor = texture(Texture, UV);
	#endif
		ALBEDO = textureColor.rgb;

	#if USE_ALPHA
		ALPHA = textureColor.a;
		ALPHA_SCISSOR_THRESHOLD = 0.5;
	#endif
}

void light() {
	// Diffuse Shading
	float d =  dot(NORMAL,LIGHT) * 0.5 + 0.5;
	float toonRamp = smoothstep(ToonRampOffset, ToonRampOffset + ToonRampSmoothness, d);
	
	// Shadows
	toonRamp *= ATTENUATION;
	
	vec3 toonRampOutput = LIGHT_COLOR * toonRamp;
	vec3 ambientLightOutput = ALBEDO * ToonRampTinting;
	DIFFUSE_LIGHT += clamp((toonRampOutput - ambientLightOutput), vec3(0.0), vec3(1.0));
	
	
	#if USE_RIM
		float fresnel = fresnel(RimPower, NORMAL, VIEW);
		float d2 = dot(NORMAL, LIGHT);
		d2 *= fresnel;
		d2 = smoothstep(RimCutOff, RimCutOff + RimSmoothness, d2);
		
		vec3 rimOutput =  d2 * RimLightBrightness * ALBEDO;
		
		DIFFUSE_LIGHT += rimOutput;
	#endif
	
	
	
	#if USE_SUBSURFACESCATTERING
		float subSurfBack = dot(VIEW, -(LIGHT + NORMAL * SubSurfDistortion));
		float subSurfFront = dot(VIEW, LIGHT - NORMAL * SubSurfDistortion);
		subSurfBack = max(subSurfBack, 0.0);
		subSurfFront = max(subSurfFront, 0.0);
		
		float subSurfScattering = smoothstep(SubSurfCutoff, SubSurfCutoff + SubSurfSmoothness, subSurfBack + subSurfFront); 
		
		vec3 subSurfColor = SubSurfTint * texture(SubSurfTexture, UV).rgb;
		DIFFUSE_LIGHT += subSurfScattering * SubSurfBrightness * subSurfColor;
	#endif         
          
	
	SPECULAR_LIGHT = ambientLightOutput;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_b2s7r"]
render_priority = 0
shader = SubResource("Shader_indmr")
shader_parameter/ToonRampOffset = 0.511
shader_parameter/ToonRampSmoothness = 0.05
shader_parameter/ToonRampTinting = Color(0.63773, 0.324889, 0.322546, 1)
shader_parameter/RimPower = 4.944
shader_parameter/RimCutOff = 0.0
shader_parameter/RimSmoothness = 0.466
shader_parameter/RimLightBrightness = 50.0
shader_parameter/SubSurfDistortion = 1.0
shader_parameter/SubSurfTint = Color(0.740764, 0.216334, 0.405269, 1)
shader_parameter/SubSurfBrightness = 3.0
shader_parameter/SubSurfCutoff = 0.5
shader_parameter/SubSurfSmoothness = 0.05
shader_parameter/Texture = ExtResource("4_8bit7")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_ygajk"]
transparency = 2
alpha_scissor_threshold = 0.5
alpha_antialiasing_mode = 0
albedo_texture = ExtResource("5_l0npq")

[sub_resource type="SphereShape3D" id="SphereShape3D_22mvs"]
radius = 13.0

[sub_resource type="SphereShape3D" id="SphereShape3D_pf3dq"]
resource_local_to_scene = true
radius = 1.0

[node name="SlimeMetal" type="CharacterBody3D"]
collision_layer = 2
collision_mask = 3
script = ExtResource("1_31s8q")
slime_type = 6
min_speed = 0.0
max_speed = 0.0

[node name="CollisionShape" type="CollisionShape3D" parent="."]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0746541, 0.495757, 0.16989)
shape = SubResource("SphereShape3D_6nu0y")
debug_color = Color(0.787219, 0.410982, 0.360379, 0.42)

[node name="Pivot" type="Node3D" parent="."]
unique_name_in_owner = true

[node name="SlimeModel" parent="Pivot" instance=ExtResource("1_gwy1k")]
unique_name_in_owner = true
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0)

[node name="Eyes" parent="Pivot/SlimeModel/SLime/Armature/Skeleton3D" index="0"]
surface_material_override/0 = SubResource("StandardMaterial3D_b2s7r")

[node name="Sphere" parent="Pivot/SlimeModel/SLime/Armature/Skeleton3D" index="1"]
transform = Transform3D(1, 0, 7.10543e-15, 0, 1, 0, -7.10543e-15, 0, 1, -0.0102396, -0.0116708, 0.00671297)
surface_material_override/0 = SubResource("ShaderMaterial_b2s7r")
surface_material_override/1 = SubResource("StandardMaterial3D_ygajk")

[node name="FlockingZone" type="Area3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
collision_layer = 0
collision_mask = 2

[node name="FlockingZoneCollisionShape" type="CollisionShape3D" parent="FlockingZone"]
unique_name_in_owner = true
shape = SubResource("SphereShape3D_22mvs")

[node name="UpdateAmbientDirectionTimer" type="Timer" parent="."]
unique_name_in_owner = true
wait_time = 5.0
one_shot = true

[node name="TouchZone" type="Area3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
collision_layer = 0
collision_mask = 2

[node name="TouchCollisionShape3D" type="CollisionShape3D" parent="TouchZone"]
unique_name_in_owner = true
shape = SubResource("SphereShape3D_pf3dq")

[node name="AlertedIndicator" parent="." instance=ExtResource("6_8bit7")]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.75984, 0)

[node name="NudgeableIndicator" parent="." instance=ExtResource("7_rsrpr")]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.75984, 0)

[node name="OutOfBoundsDespawnTimer" type="Timer" parent="."]
unique_name_in_owner = true
wait_time = 20.0

[connection signal="body_entered" from="FlockingZone" to="." method="_on_flocking_zone_body_entered"]
[connection signal="body_exited" from="FlockingZone" to="." method="_on_flocking_zone_body_exited"]
[connection signal="timeout" from="UpdateAmbientDirectionTimer" to="." method="_on_update_ambient_direction_timer_timeout"]
[connection signal="timeout" from="OutOfBoundsDespawnTimer" to="." method="_on_out_of_bounds_despawn_timer_timeout"]

[editable path="Pivot/SlimeModel"]
[editable path="Pivot/SlimeModel/SLime"]
